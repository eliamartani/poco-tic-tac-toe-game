{"version":3,"sources":["components/Square/styled.ts","components/Square/index.tsx","components/Board/styled.ts","components/Board/index.tsx","shared/keyframes.ts","components/Game/styled.ts","components/Game/index.tsx","components/Menu/styled.ts","components/Menu/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Button","styled","button","props","isX","Square","onClick","value","Box","div","Row","Board","renderSquare","i","squares","openUpKeyframe","keyframes","fadeInKeyframe","Game","GameInfo","displayModal","GameInfoContainer","GameInfoText","GameInfoLabel","GameInfoStatus","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","calculateWinner","lines","length","a","b","c","updateState","step","next","useEffect","restartGame","current","winner","index","_history","slice","handleClick","Menu","onClickRestart","App","setRestartGame","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q9BAMO,IAAMA,EAASC,IAAOC,OAAV,KAGP,SAACC,GAAD,OAAyBA,EAAMC,IAAM,SAAW,YCK7CC,EALuB,SAACF,GAAD,OACpC,kBAAC,EAAD,CAAUC,IAAKD,EAAMC,IAAKE,QAASH,EAAMG,SACtCH,EAAMI,Q,8MCTJ,IAAMC,EAAMP,IAAOQ,IAAV,KAIHC,EAAMT,IAAOQ,IAAV,KCkCDE,EA/BqB,SAACR,GACnC,IAAMS,EAAe,SAACC,GACpB,OACE,kBAAC,EAAD,CACET,IAA0B,MAArBD,EAAMW,QAAQD,GACnBN,MAAOJ,EAAMW,QAAQD,GACrBP,QAAS,kBAAMH,EAAMG,QAAQO,OAKnC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGD,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,kBAAC,EAAD,KACGA,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,kBAAC,EAAD,KACGA,EAAa,GACbA,EAAa,GACbA,EAAa,M,sZCjCf,IAAMG,EAAiBC,YAAH,KAgBdC,EAAiBD,YAAH,K,grCCXpB,IAAME,EAAOjB,IAAOQ,IAAV,KASJU,EAAWlB,IAAOQ,IAAV,KAIR,SAACN,GAAD,OAA2BA,EAAMiB,aAAe,OAAS,UAUzDC,EAAoBpB,IAAOQ,IAAV,IACfM,GAYFO,EAAerB,IAAOQ,IAAV,IACVQ,GAMFM,EAAgBtB,YAAOqB,EAAPrB,CAAH,KAIbuB,EAAiBvB,YAAOqB,EAAPrB,CAAH,KCmDZiB,EA7FmB,SAACf,GAAsB,IAAD,EACxBsB,mBAAoB,CAChD,CACEX,QAASY,MAAM,GAAGC,KAAK,SAH2B,mBAC/CC,EAD+C,KACtCC,EADsC,OAMlBJ,mBAAS,GANS,mBAM/CK,EAN+C,KAMnCC,EANmC,OAOxBN,oBAAS,GAPe,mBAO/CO,EAP+C,KAOtCC,EAPsC,KAgChDC,EAAkB,SAACpB,GAWvB,IAVA,IAAMqB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAtB,EAAI,EAAGA,EAAIsB,EAAMC,OAAQvB,IAAK,CAAC,IAAD,cACnBsB,EAAMtB,GADa,GAC9BwB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GACEzB,EAAQuB,IACRvB,EAAQuB,KAAOvB,EAAQwB,IACvBxB,EAAQuB,KAAOvB,EAAQyB,GAEvB,OAAOzB,EAAQuB,GAGnB,OAAO,MAGHG,EAAc,SAACZ,EAAoBa,EAAcC,GACrDb,EAAWD,GACXG,EAAcU,GACdR,EAAWS,IAGbC,qBAAU,WACRH,EACE,CACE,CACE1B,QAASY,MAAM,GAAGC,KAAK,QAG3B,GACA,KAED,CAACxB,EAAMyC,cAEV,IAAMC,EAAUjB,EAAQE,GAClBgB,EAASZ,EAAgBW,EAAQ/B,SACjCM,IAAiB0B,EAEvB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEhC,QAAS+B,EAAQ/B,QACjBR,QAAS,SAACyC,GAAD,OAzEK,SAAClC,GACnB,IAAMmC,EAAWpB,EAAQqB,MAAM,EAAGnB,EAAa,GAEzChB,EADUkC,EAASA,EAASZ,OAAS,GACnBtB,QAAQmC,QAE5Bf,EAAgBpB,IAAYA,EAAQD,KAIxCC,EAAQD,GAAKmB,EAAU,IAAM,IAE7BQ,EAAY,GAAD,mBAEJQ,GAFI,CAGP,CACElC,QAASA,KAGbkC,EAASZ,QACRJ,IAsD6BkB,CAAYH,MAE1C,kBAAC,EAAD,CAAY3B,aAAcA,GACxB,kBAAC,EAAD,KACE,kBAAC,EAAD,gBACA,kBAAC,EAAD,KAAmB0B,O,ofCjGtB,IAAMtC,EAAMP,IAAOQ,IAAV,KAOHT,EAASC,IAAOC,OAAV,KCKJiD,EAPmB,SAAChD,GACjC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUG,QAASH,EAAMiD,gBAAzB,aCSSC,EAfO,WAAO,IAAD,EACY5B,oBAAS,GADrB,mBACnBmB,EADmB,KACNU,EADM,KAO1B,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAMH,eANiB,WACzBE,GAAgBV,MAMd,kBAAC,EAAD,CAAMA,YAAaA,MCFLY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0a1068e5.chunk.js","sourcesContent":["import styled from 'styled-components';\n\ninterface ButtonProps {\n  isX: boolean;\n}\n\nexport const Button = styled.button`\n  background: #fff;\n  border: 1px solid #ddd;\n  color: #${(props: ButtonProps) => (props.isX ? 'ff8360' : '3cdbd3')};\n  display: inline-block;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  font-size: 4rem;\n  font-weight: bold;\n  height: 6rem;\n  line-height: 1;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  transition: background 0.2s;\n  vertical-align: top;\n  width: 6rem;\n\n  &:hover {\n    background: #f0f0f0;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 6rem;\n    height: 10rem;\n    width: 10rem;\n  }\n`;\n","import React from 'react';\nimport * as S from './styled';\n\ninterface SquareProps {\n  onClick: () => void;\n  isX: boolean;\n  value: string;\n}\n\nconst Square: React.FC<SquareProps> = (props: SquareProps) => (\n  <S.Button isX={props.isX} onClick={props.onClick}>\n    {props.value}\n  </S.Button>\n);\nexport default Square;\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n`;\n\nexport const Row = styled.div`\n  font-size: 0;\n`;\n","import React from 'react';\nimport Square from '../Square';\nimport * as S from './styled';\n\ninterface BoardProps {\n  onClick: (index: number) => any;\n  squares: string[];\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const renderSquare = (i: number) => {\n    return (\n      <Square\n        isX={props.squares[i] === 'X'}\n        value={props.squares[i]}\n        onClick={() => props.onClick(i)}\n      />\n    );\n  };\n\n  return (\n    <S.Box>\n      <S.Row>\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </S.Row>\n      <S.Row>\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </S.Row>\n      <S.Row>\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </S.Row>\n    </S.Box>\n  );\n};\nexport default Board;\n","import {keyframes} from 'styled-components';\n\nexport const openUpKeyframe = keyframes`\n0% {\n  max-width: 0;\n  opacity: 0;\n  visibility: hidden;\n}\n50% {\n  max-width: 0;\n}\n100% {\n  max-width: 25rem;\n  opacity: 1;\n  visibility: visible;\n}\n`;\n\nexport const fadeInKeyframe = keyframes`\n0%, 50% {\n  opacity: 0;\n  visibility: hidden;\n}\n100% {\n  opacity: 1;\n  visibility: visible;\n}\n`;\n","import styled from 'styled-components';\nimport {openUpKeyframe, fadeInKeyframe} from '../../shared/keyframes';\n\ninterface GameInfoProps {\n  displayModal: boolean;\n}\n\nexport const Game = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  height: 100vh;\n  padding: 0 1rem;\n`;\n\nexport const GameInfo = styled.div`\n  align-items: center;\n  background: rgba(60, 219, 211, 0.3);\n  bottom: 0;\n  display: ${(props: GameInfoProps) => (props.displayModal ? 'flex' : 'none')};\n  flex-direction: row;\n  justify-content: center;\n  left: 0;\n  padding: 0 1rem;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nexport const GameInfoContainer = styled.div`\n  animation: ${openUpKeyframe} 0.6s linear 1;\n  background: #fff;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  max-width: 25rem;\n  overflow: hidden;\n  padding: 2rem 1rem;\n  position: relative;\n  text-align: center;\n  width: 100%;\n`;\n\nexport const GameInfoText = styled.div`\n  animation: ${fadeInKeyframe} 1s linear 1;\n  color: #7dce82;\n  line-height: 1;\n  text-transform: uppercase;\n`;\n\nexport const GameInfoLabel = styled(GameInfoText)`\n  font-size: 2rem;\n`;\n\nexport const GameInfoStatus = styled(GameInfoText)`\n  font-size: 5rem;\n  font-weight: bold;\n`;\n","import React, {useEffect, useState} from 'react';\nimport Board from '../Board';\nimport * as S from './styled';\n\ninterface GameProps {\n  restartGame: boolean;\n}\n\ninterface History {\n  squares: string[];\n}\n\nconst Game: React.FC<GameProps> = (props: GameProps) => {\n  const [history, setHistory] = useState<History[]>([\n    {\n      squares: Array(9).fill(null),\n    },\n  ]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const handleClick = (i: number) => {\n    const _history = history.slice(0, stepNumber + 1);\n    const current = _history[_history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? 'X' : 'O';\n\n    updateState(\n      [\n        ..._history,\n        {\n          squares: squares,\n        },\n      ],\n      _history.length,\n      !xIsNext,\n    );\n  };\n\n  const calculateWinner = (squares: string[]) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n\n  const updateState = (history: History[], step: number, next: boolean) => {\n    setHistory(history);\n    setStepNumber(step);\n    setXIsNext(next);\n  };\n\n  useEffect(() => {\n    updateState(\n      [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      0,\n      true,\n    );\n  }, [props.restartGame]);\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n  const displayModal = !!winner;\n\n  return (\n    <S.Game>\n      <Board\n        squares={current.squares}\n        onClick={(index: number) => handleClick(index)}\n      />\n      <S.GameInfo displayModal={displayModal}>\n        <S.GameInfoContainer>\n          <S.GameInfoLabel>Winner:</S.GameInfoLabel>\n          <S.GameInfoStatus>{winner}</S.GameInfoStatus>\n        </S.GameInfoContainer>\n      </S.GameInfo>\n    </S.Game>\n  );\n};\nexport default Game;\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  position: fixed;\n  right: 1rem;\n  top: 1rem;\n  z-index: 1;\n`;\n\nexport const Button = styled.button`\n  background: #eee299;\n  border: 0;\n  color: #fff;\n  font-size: 1.2rem;\n  padding: 5px 15px;\n  text-transform: uppercase;\n  transition: background 0.2s;\n\n  &:hover {\n    background: #dcd18a;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.5rem;\n    padding: 10px 20px;\n  }\n`;\n","import React from 'react';\nimport * as S from './styled';\n\ninterface MenuProps {\n  onClickRestart: () => void;\n}\n\nconst Menu: React.FC<MenuProps> = (props: MenuProps) => {\n  return (\n    <S.Box>\n      <S.Button onClick={props.onClickRestart}>Restart</S.Button>\n    </S.Box>\n  );\n};\nexport default Menu;\n","import React, {useState} from 'react';\nimport Game from '../Game';\nimport Menu from '../Menu';\n\nconst App: React.FC = () => {\n  const [restartGame, setRestartGame] = useState(false);\n\n  const handleClickRestart = () => {\n    setRestartGame(!restartGame);\n  };\n\n  return (\n    <div className=\"App\">\n      <Menu onClickRestart={handleClickRestart} />\n      <Game restartGame={restartGame} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}